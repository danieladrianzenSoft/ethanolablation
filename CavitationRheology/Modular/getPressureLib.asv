classdef getPressureLib
    methods(Static)
        function p = pressure_newtonian_fluid_plus_solid(t, r, ind_r_cavity, r_needle, r_tot, lambda, phi, epsilon_c, k_c, k_t, Q_needle, dlambdadt)
            p0 = getPressureLib.p_c - (Q_needle / (pi * k_c)) * ((lambda * r_needle) ./ (1 - lambda));
            p(1) = p0;
            p(2:ind_r_cavity) = (Q_needle / (pi * k_c)) * ((1 ./ (r(2:ind_r_cavity))) - (1 / (r_needle))) + p0;
            p(ind_r_cavity + 1: end) = ((Q_needle * phi) / (pi * k_t)) * ((1 ./ r(ind_r_cavity+1:end)) - (1 / r_tot))  ;
        end
        function p = velocity_bc_porosity_v2(t, r, ind_r_cavity, r_needle, r_tot, lambda, phi, theta, epsilon_c, k_c, k_t, Q_needle, dlambdadt)
            % CONTINUOUS VELOCITY BOUNDARY CONDITION AT CAVITY RADIUS
            % updated to fix issue with continuity equation for v_c, with
            % source term from needle.
            p(1:ind_r_cavity,:) = getPressureLib.p_c ...
                    + (phi/k_c) * (Q_needle/(4*pi*r_needle)) * ((r_needle ./ r(1:ind_r_cavity)) - 1 - ((1 - lambda) ./ lambda))...
                    + (phi/k_c) * (dlambdadt) .* (r_needle .* (r(1:ind_r_cavity) - lambda .* (r_needle ./ (r(1:ind_r_cavity)))))...
                    + (phi/k_c) * (Q_needle/(8*pi*epsilon_c*r_needle))... 
                        * (3 ...
                        - (r_needle ./ (r(1:ind_r_cavity))) .* (2 + (r(1:ind_r_cavity).^3)/(r_needle^3)) ...
                        + 2 * ((1-lambda) ./ lambda) ... 
                        - (lambda + 1) .* (1 - lambda));
            p(ind_r_cavity+1:end,:) = (Q_needle * theta / (4 * pi * k_t * epsilon_c)) * (epsilon_c + lambda.^3 - 1) .* ((1./r(ind_r_cavity+1:end)) - (1/r_tot));
        end
        function p = velocity_bc_porosity(t, r, ind_r_cavity, r_needle, r_tot, lambda, phi, theta, k_c, k_t, Q_needle, dlambdadt)
            % CONTINUOUS VELOCITY BOUNDARY CONDITION AT CAVITY RADIUS
            p(1:ind_r_cavity,:) = getPressureLib.p_c*(phi/k_c)*((1-lambda)/lambda)...
                    *((Q_needle/(4*pi*r_needle))-r_needle^2*lambda*dlambdadt)...
                    *((lambda*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)/(1-lambda)-1)...
                    +(phi/k_c)*(dlambdadt)*(r_needle*(r(1:ind_r_cavity)-r_needle))*(1-lambda*r_needle/(r(1:ind_r_cavity)))...
                    +getPressureLib.p_c;
            p(ind_r_cavity+1:end,:) = (Q_needle * theta / (4*pi*k_t))*((1/r(ind_r_cavity+1:end))-(1/r_tot));
%             p = zeros(length(r), length(t));
%             for i = 1:length(t)
%                 p(1:ind_r_cavity,i) = getPressureLib.p_c(i)*(phi/k_c)*((1-lambda)/lambda)...
%                     *((Q_needle/(4*pi*r_needle))-r_needle^2*lambda(i)*dlambdadt(i))...
%                     *((lambda(i)*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)/(1-lambda(i))-1)...
%                     +(phi/k_c)*(dlambdadt(i))*(r_needle*(r(1:ind_r_cavity)-r_needle))*(1-lambda(i)*r_needle/(r(1:ind_r_cavity)))...
%                     +getPressureLib.p_c(i);
%                 p(ind_r_cavity+1:end,i) = (Q_needle/(4*pi*k_t))*((1/r(ind_r_cavity+1:end))-(1/r_tot));
%             end
        end
        function p = velocity_bc(t, r, ind_r_cavity, r_needle, r_tot, lambda, phi, k_c, k_t, Q_needle, dlambdadt)
            % CONTINUOUS VELOCITY BOUNDARY CONDITION AT CAVITY RADIUS
            p(1:ind_r_cavity,:) = getPressureLib.p_c*(phi/k_c)*((1-lambda)/lambda)...
                    *((Q_needle/(4*pi*r_needle))-r_needle^2*lambda*dlambdadt)...
                    *((lambda*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)/(1-lambda)-1)...
                    +(phi/k_c)*(dlambdadt)*(r_needle*(r(1:ind_r_cavity)-r_needle))*(1-lambda*r_needle/(r(1:ind_r_cavity)))...
                    +getPressureLib.p_c;
            p(ind_r_cavity+1:end,:) = (Q_needle/(4*pi*k_t))*((1/r(ind_r_cavity+1:end))-(1/r_tot));
%             p = zeros(length(r), length(t));
%             for i = 1:length(t)
%                 p(1:ind_r_cavity,i) = getPressureLib.p_c(i)*(phi/k_c)*((1-lambda)/lambda)...
%                     *((Q_needle/(4*pi*r_needle))-r_needle^2*lambda(i)*dlambdadt(i))...
%                     *((lambda(i)*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)/(1-lambda(i))-1)...
%                     +(phi/k_c)*(dlambdadt(i))*(r_needle*(r(1:ind_r_cavity)-r_needle))*(1-lambda(i)*r_needle/(r(1:ind_r_cavity)))...
%                     +getPressureLib.p_c(i);
%                 p(ind_r_cavity+1:end,i) = (Q_needle/(4*pi*k_t))*((1/r(ind_r_cavity+1:end))-(1/r_tot));
%             end
        end
        function p = pressure_bc(t, r, ind_r_cavity, r_needle, r_tot, lambda, phi, k_c, k_t, Q_needle, dlambdadt)
            % CONTINUOUS PRESSURE BOUNDARY CONDITION AT CAVITY RADIUS
            p(1:ind_r_cavity) = getPressureLib.p_c.*(phi/k_c)*((1-lambda)./lambda)...
                    .*((Q_needle/(4*pi*r_needle))-r_needle^2*lambda.*dlambdadt)...
                    .*((lambda*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)./(1-lambda)-1)...
                    +(phi/k_c)*(dlambdadt).*(r_needle*(r(1:ind_r_cavity)-r_needle)).*(1-lambda*r_needle./(r(1:ind_r_cavity)))...
                    +getPressureLib.p_c;
            p(ind_r_cavity+1:end,:) = getPressureLib.p_c*((lambda*r_needle*r_tot)/(r_tot-lambda*r_needle))*((1./r(ind_r_cavity+1:end))-(1./r_tot));
%             p = zeros(length(r), length(t));
%             for i = 1:length(t)
%                 p(1:ind_r_cavity,i) = getPressureLib.p_c(i)*(phi/k_c)*((1-lambda)/lambda)...
%                     *((Q_needle/(4*pi*r_needle))-r_needle^2*lambda(i)*dlambdadt(i))...
%                     *((lambda(i)*r_needle./(r(1:ind_r_cavity)))*(1-r(1:ind_r_cavity)/r_needle)/(1-lambda(i))-1)...
%                     +(phi/k_c)*(dlambdadt(i))*(r_needle*(r(1:ind_r_cavity)-r_needle))*(1-lambda(i)*r_needle/(r(1:ind_r_cavity)))...
%                     +getPressureLib.p_c(i);
%                 p(ind_r_cavity+1:end,i) = getPressureLib.p_c(i)*((lambda(i)*r_needle*r_tot)/(r_tot-lambda(i)*r_needle))*((1./r(ind_r_cavity+1:end))-(1./r_tot));
%             end
        end
        function p = p_c(E, lambda)
            p = E * (5/6 - (2 ./ (3 * lambda)) - (1 ./ (6 * (lambda .^ 4))));
        end
        function p = p_0(phi, k_c, p_c, lambda, dlambdadt, Q_needle, r_needle)
            p = p_c - ((phi/k_c) * ((1-lambda) ./ lambda) .* ((Q_needle/(4*pi*r_needle))-(r_needle^2)*(lambda .* dlambdadt)));
        end
        function p = p_inf(p0, mu_oh, Q_needle, L_needle, r_needle)
            Res_needle = (8 * mu_oh * L_needle) / (pi * (r_needle ^ 4));
            p = Res_needle * Q_needle + p0;
        end
        function p = p_crit(E, lambda)
            p = (5/6) * E * ones(size(lambda));
        end
        function sigma = stress(E, lambda)
            sigma = E * (lambda .^ 2 - (1 ./ lambda));
        end
    end
end